# main.py
# Locaith AI ‚Äì Zalo OA CSKH Chatbot (MVP, production-ready skeleton)
# - T·ª± nhi√™n nh∆∞ ng∆∞·ªùi Vi·ªát, h·ªèi th√¥ng tin ƒë·ªÉ x∆∞ng h√¥ ƒë√∫ng
# - Hi·ªÉu nhi·ªÅu lo·∫°i s·ª± ki·ªán Zalo OA: text/image/sticker/gif/audio/video/file/location/follow/unfollow
# - Ch·ªëng spam, l∆∞u phi√™n theo user, nh·ªõ ng·ªØ c·∫£nh ng·∫Øn
# - RAG demo (FAISS) + Serper.dev cho truy v·∫•n realtime + Gemini 2.5 Flash ƒë·ªÉ t·ªïng h·ª£p tr·∫£ l·ªùi
# - S·ª≠a l·ªói l·∫∑p ch√†o, kh√¥ng c√≤n ‚Äúb·∫Øt bu·ªôc ƒê·ªìng √Ω‚Äù, g·ªçn route, m√£ s·∫°ch d·ªÖ deploy Render

import os, time, hmac, hashlib, json, re, io
from typing import Dict, Any, List, Optional

import requests
import numpy as np
from PIL import Image
from dotenv import load_dotenv

from fastapi import FastAPI, Request, UploadFile, File, Form, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse

import google.generativeai as genai
from pypdf import PdfReader
from docx import Document as Docx
import faiss
from bs4 import BeautifulSoup

# =================== ENV & INIT ===================
load_dotenv()

ZALO_OA_TOKEN        = os.getenv("ZALO_OA_TOKEN")
ZALO_APP_SECRET      = os.getenv("ZALO_APP_SECRET", "")
ZALO_VERIFY_FILE     = os.getenv("ZALO_VERIFY_FILE")           # v√≠ d·ª•: "zaloac516c....html"
ENABLE_APPSECRET     = os.getenv("ENABLE_APPSECRET_PROOF", "false").lower() == "true"

GEMINI_API_KEY       = os.getenv("GEMINI_API_KEY")
SERPER_API_KEY       = os.getenv("SERPER_API_KEY")
ENABLE_CORS          = os.getenv("ENABLE_CORS", "false").lower() == "true"
ALLOWED_ORIGINS_STR  = os.getenv("ALLOWED_ORIGINS", "*")
ADMIN_ALERT_USER_ID  = os.getenv("ADMIN_ALERT_USER_ID", "")
MAX_UPLOAD_MB        = int(os.getenv("MAX_UPLOAD_MB", "25"))

VERIFY_DIR = "verify"

assert ZALO_OA_TOKEN and GEMINI_API_KEY, "Thi·∫øu ZALO_OA_TOKEN ho·∫∑c GEMINI_API_KEY"

genai.configure(api_key=GEMINI_API_KEY)
MODEL_FLASH = "gemini-2.5-flash"
MODEL_PRO   = "gemini-2.5-pro"

app = FastAPI(
    title="Locaith AI - Zalo Webhook",
    description="AI-powered Zalo OA webhook for Locaith services",
    version="2.0.0"
)

if ENABLE_CORS:
    origins = [o.strip() for o in (ALLOWED_ORIGINS_STR or "*").split(",")]
    app.add_middleware(
        CORSMiddleware,
        allow_origins=origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

# =================== STORES ===================
rate_bucket: Dict[str, List[float]] = {}    # user_id -> timestamps (30s window)
warn_count: Dict[str, int] = {}             # user_id -> warnings count
soft_ban_until: Dict[str, float] = {}       # user_id -> unix time

# Per-user session
session: Dict[str, Dict[str, Any]] = {}     # user_id -> {...}

MAX_MSG_PER_30S  = 6
BAN_DURATION_SEC = 24 * 3600

# --- FAISS in-memory (RAG demo) ---
EMBED_DIM = 768
faiss_index = faiss.IndexFlatIP(EMBED_DIM)    # cosine (sau khi normalize)
kb_chunks: List[str] = []
kb_meta:   List[dict] = []

# =================== ZALO HELPERS ===================
def _appsecret_proof(access_token: str, app_secret: str) -> str:
    return hmac.new(app_secret.encode(), access_token.encode(), hashlib.sha256).hexdigest()

def zalo_headers() -> Dict[str, str]:
    h = {"Content-Type": "application/json", "access_token": ZALO_OA_TOKEN}
    if ENABLE_APPSECRET and ZALO_APP_SECRET:
        h["appsecret_proof"] = _appsecret_proof(ZALO_OA_TOKEN, ZALO_APP_SECRET)
    return h

def zalo_send_text(user_id: str, text: str) -> dict:
    url = "https://openapi.zalo.me/v3.0/oa/message/cs"
    payload = {"recipient": {"user_id": user_id}, "message": {"text": text}}
    r = requests.post(url, headers=zalo_headers(), json=payload, timeout=15)
    if r.status_code >= 400:
        print("Send error:", r.text)
    return r.json() if r.text else {}

def zalo_get_profile(user_id: str) -> Dict[str, Any]:
    url = "https://openapi.zalo.me/v2.0/oa/getprofile"
    payload = {"user_id": user_id}
    r = requests.post(url, headers=zalo_headers(), json=payload, timeout=15)
    if r.status_code == 200:
        return r.json().get("data", {})
    print("Get profile failed:", r.text)
    return {}

# =================== SPAM & SESSION ===================
def is_spamming(user_id: str) -> bool:
    now = time.time()
    if user_id in soft_ban_until and now < soft_ban_until[user_id]:
        return True
    bucket = rate_bucket.setdefault(user_id, [])
    bucket.append(now)
    rate_bucket[user_id] = [t for t in bucket if now - t <= 30]
    return len(rate_bucket[user_id]) > MAX_MSG_PER_30S

def escalate_spam(user_id: str) -> str:
    c = warn_count.get(user_id, 0) + 1
    warn_count[user_id] = c
    if c == 1:
        return ("M√¨nh th·∫•y t·∫ßn su·∫•t tin nh·∫Øn h∆°i d√†y ƒë√≥ n√®. "
                "M√¨nh xin ph√©p gi·∫£m nh·ªãp x√≠u nh√©‚Äît√°i ph·∫°m m√¨nh s·∫Ω t·∫°m kh√≥a 24 gi·ªù ·∫°.")
    else:
        soft_ban_until[user_id] = time.time() + BAN_DURATION_SEC
        if ADMIN_ALERT_USER_ID:
            zalo_send_text(ADMIN_ALERT_USER_ID, f"[SPAM] User {user_id} b·ªã t·∫°m kh√≥a 24h.")
        return ("B·∫°n ƒë√£ b·ªã t·∫°m kh√≥a t∆∞∆°ng t√°c 24 gi·ªù do spam. N·∫øu c·∫ßn g·∫•p h√£y li√™n h·ªá CSKH Locaith AI gi√∫p m√¨nh ·∫°.")

def ensure_session(user_id: str) -> Dict[str, Any]:
    return session.setdefault(user_id, {
        "welcomed": False,             # ƒë√£ g·ª≠i l·ªùi ch√†o ch∆∞a (ch·ªâ 1 l·∫ßn)
        "profile": None,
        "salute": None,                # x∆∞ng h√¥ ∆∞a th√≠ch: "anh/ch·ªã/em + T√™n"
        "product": None,               # "chatbot" | "website" | "landing"
        "info": {},                    # name/phone/email/domain/logo/notes
        "history": [],                 # [{role,text,ts}]
        "image_notes": []
    })

def push_history(user_id: str, role: str, text: str):
    s = ensure_session(user_id)
    s["history"].append({"role": role, "text": text, "ts": time.time()})
    if len(s["history"]) > 12:
        s["history"] = s["history"][-12:]

def short_context(user_id: str, k: int = 6) -> str:
    s = ensure_session(user_id)
    rows = []
    for h in s["history"][-k:]:
        prefix = "USER:" if h["role"] == "user" else "ASSISTANT:"
        rows.append(f"{prefix} {h['text']}")
    return "\n".join(rows)

# =================== WEB SEARCH VIA SERPER ===================
def search_web(query: str, num_results: int = 3) -> str:
    if not SERPER_API_KEY:
        return ""
    try:
        headers = {'X-API-KEY': SERPER_API_KEY, 'Content-Type': 'application/json'}
        payload = {'q': query, 'num': num_results, 'gl': 'vn', 'hl': 'vi'}
        r = requests.post('https://google.serper.dev/search', headers=headers, json=payload, timeout=12)
        if r.status_code != 200:
            return ""
        data = r.json()
        parts = []
        if 'answerBox' in data and data['answerBox'].get('answer'):
            parts.append(f"**Tr·∫£ l·ªùi nhanh:** {data['answerBox']['answer']}")
        for it in (data.get('organic') or [])[:num_results]:
            title = it.get('title', '')
            snippet = it.get('snippet', '')
            link = it.get('link', '')
            parts.append(f"**{title}**\n{snippet}\nNgu·ªìn: {link}")
        return "\n\n".join(parts)
    except Exception as e:
        print("Serper error:", e)
        return ""

def should_search_web(text: str) -> bool:
    if not text:
        return False
    kws = [
        "tin t·ª©c","m·ªõi nh·∫•t","h√¥m nay","gi√°","l·ªãch","s·ª± ki·ªán","th·ªùi ti·∫øt","d·ª± b√°o",
        "trend","viral","trending","tuy·ªÉn d·ª•ng","k·∫øt qu·∫£","t·ª∑ gi√°","bitcoin","ch·ª©ng kho√°n",
        "xe bus","metro","gi·ªù chi·∫øu","l·ªãch thi","k√®o","promotion","khuy·∫øn m√£i","h·ªçc b·ªïng"
    ]
    t = text.lower()
    return any(k in t for k in kws)

# =================== PROMPTS ===================
def system_prompt(profile: Dict[str, Any], salute: Optional[str]) -> str:
    dn = profile.get("display_name") or "b·∫°n"
    call = salute or dn or "b·∫°n"
    return f"""
B·∫°n l√† Minh ‚Äì tr·ª£ l√Ω AI c·ªßa Locaith AI (locaith.ai). H√£y tr√≤ chuy·ªán t·ª± nhi√™n nh∆∞ ng∆∞·ªùi Vi·ªát:
- X∆∞ng "m√¨nh" cho b·∫£n th√¢n; x∆∞ng v·ªõi ƒë·ªëi ph∆∞∆°ng l√† "{call}".
- Th√¢n thi·ªán, ·∫•m √°p, d√≠ d·ªèm nh·∫π; d√πng emoji v·ª´a ph·∫£i.
- C√≥ th·ªÉ t∆∞ v·∫•n CSKH Locaith (Chatbot AI, Website/Landing) khi ƒë∆∞·ª£c h·ªèi.
- Khi nghi v·∫•n c·∫ßn th√¥ng tin th·ªùi gian th·ª±c, h√£y t·ªïng h·ª£p k·∫øt qu·∫£ t√¨m web (n·∫øu c√≥) v√†o c√¢u tr·∫£ l·ªùi.
- Kh√¥ng ti·∫øt l·ªô ghi ch√∫ n·ªôi b·ªô hay th√¥ng tin nh·∫°y c·∫£m. Tu√¢n th·ªß an to√†n & ph√°p lu·∫≠t.
- K·∫øt th√∫c b·∫±ng m·ªôt c√¢u h·ªèi ng·∫Øn ƒë·ªÉ gi·ªØ nh·ªãp h·ªôi tho·∫°i.

N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ d·ªãch v·ª•, h√£y ∆∞u ti√™n:
- Xin th√¥ng tin li√™n h·ªá (H·ªç t√™n, SƒêT, Email) ƒë·ªÉ ti·ªán x∆∞ng h√¥ v√† t∆∞ v·∫•n.
- Sau ƒë√≥ h·ªèi nhu c·∫ßu: Chatbot AI / Website ho√†n ch·ªânh / Landing page.
"""

def onboarding_text(profile: Dict[str, Any]) -> str:
    name = profile.get("display_name") or "b·∫°n"
    return (f"Ch√†o {name}! M√¨nh l√† **Minh** ‚Äì tr·ª£ l√Ω AI c·ªßa Locaith üåü\n"
            "B·∫°n c√≥ th·ªÉ t√¢m s·ª± hay h·ªèi m√¨nh b·∫•t c·ª© ƒëi·ªÅu g√¨ nh√© üòä\n\n"
            "ƒê·ªÉ ti·ªán x∆∞ng h√¥ v√† h·ªó tr·ª£ ƒë√∫ng nhu c·∫ßu, cho m√¨nh xin c√°ch x∆∞ng h√¥ (anh/ch·ªã/em + t√™n) "
            "v√† **H·ªç t√™n, SƒêT, Email** ƒë∆∞·ª£c kh√¥ng ·∫°? V√≠ d·ª•: *Anh Tu·∫•n Anh ‚Äì 090xxxxxxx ‚Äì email@...*")

def ask_product() -> str:
    return ("B·∫°n ƒëang quan t√¢m **Chatbot AI**, **Website ho√†n ch·ªânh** hay **Landing page** ·∫°? "
            "M√¨nh s·∫Ω t∆∞ v·∫•n g√≥i & quy tr√¨nh chi ti·∫øt cho b·∫°n.")

def ask_assets(product: str) -> str:
    if product == "chatbot":
        return ("Tuy·ªát ·∫°! B·∫°n vui l√≤ng g·ª≠i **t√†i li·ªáu/URL** (PDF/DOC/FAQ/k·ªãch b·∫£n) ƒë·ªÉ m√¨nh train chatbot nh√©.")
    if product == "website":
        return ("OK m√¨nh tri·ªÉn khai **Website**. B·∫°n ƒë√£ c√≥ **domain** ch∆∞a? "
                "Cho m√¨nh xin **logo/m√†u th∆∞∆°ng hi·ªáu** v√† n·ªôi dung ch√≠nh n·ªØa nha.")
    if product == "landing":
        return ("OK **Landing page ~1 ng√†y**. B·∫°n cho m√¨nh m·ª•c ti√™u chi·∫øn d·ªãch, n·ªôi dung ch√≠nh "
                "v√† th√¥ng tin form li√™n h·ªá mong mu·ªën nh√©.")
    return ""

# =================== FILE/IMAGE UTILS ===================
def try_download_image_from_event(event: dict) -> Optional[bytes]:
    att = event.get("message", {}).get("attachments", [])
    for a in att or []:
        if a.get("type") != "image":
            continue
        payload = a.get("payload", {}) or {}
        url = payload.get("url") or payload.get("thumb") or payload.get("href")
        if not url:
            continue
        try:
            r = requests.get(url, timeout=20)
            if r.status_code == 200 and r.content and len(r.content) <= 8 * 1024 * 1024:
                return r.content
        except Exception:
            pass
    return None

def analyze_image_internal(img_bytes: bytes) -> str:
    try:
        image = Image.open(io.BytesIO(img_bytes)).convert("RGB")
    except Exception:
        return "an image (unreadable)"
    prompt = (
        "You are an INTERNAL image summarizer.\n"
        "Describe very briefly and neutrally what the image mainly shows in ONE short sentence.\n"
        "No personal/sensitive attributes. Plain text only."
    )
    model = genai.GenerativeModel(MODEL_PRO)
    resp = model.generate_content([prompt, image])
    try:
        note = resp.text.strip()
        return note[:200]
    except Exception:
        return "an image (summary failed)"

# =================== RAG (demo) ===================
def embed_texts(texts: list[str]) -> np.ndarray:
    vecs = []
    for t in texts:
        try:
            res = genai.embed_content(
                model="models/text-embedding-004",
                content=t,
                task_type="retrieval_document",
            )
            values = res.get("embedding", {}).get("values") or res.get("embedding")
            v = np.array(values, dtype="float32")
            v = v / (np.linalg.norm(v) + 1e-9)
            vecs.append(v)
        except Exception as e:
            print("Embed error:", e)
            vecs.append(np.zeros(EMBED_DIM, dtype="float32"))
    return np.vstack(vecs)

def chunk_text(text: str, max_chars=1200) -> List[str]:
    text = " ".join(text.split())
    chunks = []
    while text:
        chunk = text[:max_chars]
        cut = chunk.rfind(". ")
        if cut > 200:
            chunk = chunk[:cut+1]
        chunks.append(chunk)
        text = text[len(chunk):]
    return chunks

def extract_text_from_file(filename: str, data: bytes) -> str:
    name = filename.lower()
    if name.endswith(".pdf"):
        with io.BytesIO(data) as f:
            reader = PdfReader(f)
            return "\n".join(page.extract_text() or "" for page in reader.pages)
    if name.endswith(".docx"):
        with io.BytesIO(data) as f:
            doc = Docx(f)
            return "\n".join(p.text for p in doc.paragraphs)
    return data.decode("utf-8", errors="ignore")

def index_document(source_id: str, text: str, owner: str):
    chunks = chunk_text(text)
    if not chunks:
        return
    vecs = embed_texts(chunks)
    faiss_index.add(vecs)
    base = len(kb_chunks)
    for i, c in enumerate(chunks):
        kb_chunks.append(c)
        kb_meta.append({"source": source_id, "owner": owner, "pos": base + i})

def retrieve(query: str, top_k=5) -> List[dict]:
    if faiss_index.ntotal == 0:
        return []
    qv = embed_texts([query])
    D, I = faiss_index.search(qv, top_k)
    hits = []
    for idx in I[0]:
        if 0 <= idx < len(kb_chunks):
            hits.append({"text": kb_chunks[idx], "meta": kb_meta[idx]})
    return hits

# =================== LLM CALL ===================
def call_flash(sys_prompt: str, user_text: str, profile: Dict[str, Any],
               image_notes: List[str], history_str: str, rag_context: str) -> str:
    web_context = ""
    if should_search_web(user_text):
        wr = search_web(user_text, 3)
        if wr:
            web_context = f"\n\nTH√îNG TIN T·ª™ INTERNET:\n{wr}"

    private_clause = (
        "PRIVATE IMAGE NOTES (do NOT reveal or mention they exist):\n"
        + ("\n".join(f"- {n}" for n in image_notes) if image_notes else "- (none)")
    )
    content = (
        f"{private_clause}\n\n"
        f"RECENT CONTEXT:\n{history_str or '(none)'}\n\n"
        f"RETRIEVED CONTEXT (may be empty):\n{rag_context or '(none)'}{web_context}\n\n"
        f"USER MESSAGE:\n{user_text or ''}\n"
    )
    model = genai.GenerativeModel(MODEL_FLASH)
    resp = model.generate_content(
        [
            {"role": "user", "parts": [sys_prompt]},
            {"role": "user", "parts": [content]},
            {"role": "user", "parts": ["Answer in Vietnamese, warm and friendly."]},
        ],
        generation_config={"temperature": 0.7}
    )
    try:
        return resp.text.strip()
    except Exception:
        return "Xin l·ªói, h·ªá th·ªëng ƒëang b·∫≠n. B·∫°n gi√∫p m√¨nh nh·∫Øn l·∫°i sau m·ªôt ch√∫t nha üòÖ"

# =================== LIGHT NLU ===================
def guess_product(text: str) -> str:
    t = (text or "").lower()
    if "chatbot" in t: return "chatbot"
    if "landing" in t or "landing page" in t: return "landing"
    if "website" in t: return "website"
    return ""

def parse_contact(text: str) -> Dict[str, str]:
    email = None
    m = re.search(r"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}", text or "")
    if m: email = m.group(0)
    phone = None
    m2 = re.search(r"(0|\+84)[0-9]{8,11}", (text or "").replace(" ", ""))
    if m2: phone = m2.group(0)
    name = None
    # t√°ch t√™n ƒë∆°n gi·∫£n tr∆∞·ªõc d·∫•u ph·∫©y ho·∫∑c tr∆∞·ªõc s·ªë ƒëi·ªán tho·∫°i
    if text:
        name = text.split(",")[0].strip()
        if phone and phone in name: name = None
    return {"email": email, "phone": phone, "name": name}

# =================== ROUTES ===================
@app.on_event("startup")
async def startup_event():
    print("üöÄ Locaith AI Zalo Webhook starting...")
    print(f"FAISS vectors: {faiss_index.ntotal} | Chunks: {len(kb_chunks)}")

@app.get("/health")
def health():
    return {
        "status": "healthy",
        "timestamp": time.time(),
        "service": "Locaith AI - Zalo Webhook",
        "version": "2.0.0",
        "kb_chunks": len(kb_chunks),
        "faiss_index": int(faiss_index.ntotal)
    }

@app.get("/")
def root():
    return {"service": "Locaith AI - Zalo Webhook", "status": "running", "health_check": "/health"}

# ---- Knowledge ingest from URL (one route, ƒë√£ fix tr√πng) ----
@app.post("/kb/url")
def kb_from_url(user_id: str = Form(...), url: str = Form(...)):
    try:
        r = requests.get(url, timeout=20)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        text = soup.get_text(" ", strip=True)
        if not text:
            return {"ok": False, "error": "Trang kh√¥ng c√≥ n·ªôi dung vƒÉn b·∫£n"}
        index_document(source_id=url, text=text, owner=user_id)
        return {"ok": True}
    except Exception as e:
        return {"ok": False, "error": f"L·ªói: {e}"}

# ---- Zalo Domain Verification ----
@app.get("/{verify_name}")
def serve_zalo_verify(verify_name: str):
    if ZALO_VERIFY_FILE and verify_name == ZALO_VERIFY_FILE:
        path = os.path.join(VERIFY_DIR, ZALO_VERIFY_FILE)
        if os.path.exists(path):
            return FileResponse(path, media_type="text/html")
    raise HTTPException(status_code=404, detail="Not found")

# ---- Zalo webhook verification ----
@app.get("/zalo/webhook")
async def webhook_verification(challenge: str = None):
    if challenge:
        return {"challenge": challenge}
    return {"error": "Missing challenge parameter"}

# ---- Main webhook ----
@app.post("/zalo/webhook")
async def webhook(req: Request):
    # Verify signature n·∫øu b·∫≠t
    if ENABLE_APPSECRET and ZALO_APP_SECRET:
        signature = req.headers.get("X-ZEvent-Signature")
        if signature:
            body = await req.body()
            expected = hmac.new(ZALO_APP_SECRET.encode(), body, hashlib.sha256).hexdigest()
            if not hmac.compare_digest(signature, expected):
                return {"status": "invalid_signature"}

    event = await req.json()
    print("EVENT:", json.dumps(event, ensure_ascii=False))

    event_name = event.get("event_name", "")
    user_id = event.get("sender", {}).get("id")
    if not user_id:
        return {"status": "no_user_id"}

    # Ch·∫∑n spam
    if is_spamming(user_id):
        zalo_send_text(user_id, escalate_spam(user_id))
        return {"status": "spam"}

    s = ensure_session(user_id)

    # Cache profile
    if not s["profile"]:
        s["profile"] = zalo_get_profile(user_id)

    # Soft-ban
    if user_id in soft_ban_until and time.time() < soft_ban_until[user_id]:
        return {"status": "banned"}

    # ===== Handle event types =====
    user_text = (event.get("message", {}) or {}).get("text", "") or ""
    lower = user_text.lower().strip()

    if event_name == "follow":
        # Ch·ªâ ch√†o 1 l·∫ßn khi follow
        msg = onboarding_text(s["profile"])
        zalo_send_text(user_id, msg)
        s["welcomed"] = True
        push_history(user_id, "assistant", msg)
        return {"status": "welcome_sent"}

    if event_name == "unfollow":
        return {"status": "unfollowed"}

    # ·∫£nh: l∆∞u NOTE n·ªôi b·ªô (kh√¥ng l·ªô ra ngo√†i)
    img_bytes = try_download_image_from_event(event) if event_name == "user_send_image" else None
    if img_bytes:
        note = analyze_image_internal(img_bytes)
        s["image_notes"].append(note)
        if not user_text:
            zalo_send_text(user_id, "M√¨nh nh·∫≠n ƒë∆∞·ª£c ·∫£nh r·ªìi n√®. B·∫°n mu·ªën m√¨nh h·ªó tr·ª£ g√¨ t·ª´ ·∫£nh n√†y kh√¥ng ·∫°?")
            push_history(user_id, "assistant", "ƒê√£ nh·∫≠n ·∫£nh.")
            return {"status": "image_received"}

    # Sticker/GIF/Audio/Video/File/Location ‚Äì ph·∫£n h·ªìi nh·∫π, kh√¥ng ph√° lu·ªìng
    quick_ack = {
        "user_send_sticker": "M√¨nh nh·∫≠n ƒë∆∞·ª£c sticker r·ªìi n√®! üòä",
        "user_send_gif": "GIF x·ªãn qu√°! üé¨",
        "user_send_audio": "M√¨nh ƒë√£ nh·∫≠n voice c·ªßa b·∫°n nha üéµ",
        "user_send_video": "Video ƒë√£ t·ªõi! üé•",
        "user_send_file": "M√¨nh ƒë√£ nh·∫≠n file r·ªìi nha üìé",
        "user_send_location": "ƒê√£ nh·∫≠n v·ªã tr√≠ c·ªßa b·∫°n üìç",
    }
    if event_name in quick_ack and not user_text:
        zalo_send_text(user_id, quick_ack[event_name])
        return {"status": f"{event_name}_ack"}

    # ===== Greeting (kh√¥ng l·∫∑p) & thu th·∫≠p th√¥ng tin ƒë·ªÉ x∆∞ng h√¥ =====
    if not s["welcomed"]:
        msg = onboarding_text(s["profile"])
        zalo_send_text(user_id, msg)
        s["welcomed"] = True
        push_history(user_id, "assistant", msg)
        # ti·∫øp t·ª•c x·ª≠ l√Ω n·ªôi dung user_text b√™n d∆∞·ªõi (kh√¥ng √©p 'ƒë·ªìng √Ω')
        # => kh·∫Øc ph·ª•c l·ªói l·∫∑p ‚Äú1 c√¢u duy nh·∫•t‚Äù
    
    # Parse th√¥ng tin li√™n h·ªá/c√°ch x∆∞ng h√¥ n·∫øu ng∆∞·ªùi d√πng g·ª≠i
    if user_text:
        found = parse_contact(user_text)
        for k in ("email", "phone", "name"):
            if found.get(k):
                s["info"][k] = found[k]
        # c√°ch x∆∞ng h√¥: b·∫Øt c√°c c·ª•m "anh/ch·ªã/em + t√™n"
        m_salute = re.search(r"\b(anh|ch·ªã|em)\s+[A-Za-z√Ä-·ªπƒêƒë][\w√Ä-·ªπƒêƒë\s]*", user_text, flags=re.IGNORECASE)
        if m_salute:
            s["salute"] = m_salute.group(0).strip()

    # N·∫øu ch∆∞a ƒë·ªß contact ‚Üí nh·∫Øc nh·∫π nh∆∞ng kh√¥ng c·∫£n tr·ªü h·ªôi tho·∫°i
    need_contact = not (s["info"].get("phone") and s["info"].get("email"))
    contact_hint = ("\n\nƒê·ªÉ m√¨nh t∆∞ v·∫•n s√°t h∆°n, "
                    "b·∫°n g·ª≠i gi√∫p **H·ªç t√™n, SƒêT, Email** nha (v√≠ d·ª•: *Anh Nam ‚Äì 09xx ‚Äì a@b.com*).") if need_contact else ""

    # ===== N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·∫£n ph·∫©m ‚Üí flow CSKH =====
    prod_guess = guess_product(user_text)
    if prod_guess and not s["product"]:
        s["product"] = prod_guess
        zalo_send_text(user_id, ask_assets(prod_guess) + contact_hint)
        push_history(user_id, "assistant", ask_assets(prod_guess))
        return {"status": "ask_assets"}

    # N·∫øu ƒë√£ c√≥ product ‚Üí ti·∫øp t·ª•c thu th·∫≠p t√†i nguy√™n/t√≥m t·∫Øt
    if s["product"] in ("website", "landing"):
        if "domain" not in s["info"]:
            low = lower
            if "." in low or "ch∆∞a" in low or "kh√¥ng" in low:
                s["info"]["domain"] = user_text.strip()
            else:
                zalo_send_text(user_id, "B·∫°n ƒë√£ c√≥ **domain** ch∆∞a ·∫°? (nh·∫≠p domain ho·∫∑c n√≥i *ch∆∞a c√≥*).")
                return {"status": "ask_domain"}
        if "logo" not in s["info"]:
            s["info"]["logo"] = "ch∆∞a nh·∫≠n"
            zalo_send_text(user_id, "B·∫°n g·ª≠i gi√∫p **logo/m√†u th∆∞∆°ng hi·ªáu** nha (g·ª≠i sau c≈©ng ƒë∆∞·ª£c).")

        summary = (
            "‚úÖ T√≥m t·∫Øt y√™u c·∫ßu:\n"
            f"- G√≥i: {'Website' if s['product']=='website' else 'Landing page'}\n"
            f"- Li√™n h·ªá: {s['info'].get('name', s['profile'].get('display_name',''))} | {s['info'].get('phone','?')} | {s['info'].get('email','?')}\n"
            f"- Domain: {s['info'].get('domain','?')}\n"
            f"- Logo/Brand: {s['info'].get('logo')}\n"
            "N·∫øu OK, m√¨nh g·ª≠i h∆∞·ªõng d·∫´n n·ªôp t√†i li·ªáu & timeline tri·ªÉn khai nh√©."
        )
        zalo_send_text(user_id, summary)
        push_history(user_id, "assistant", summary)
        return {"status": "summary"}

    if s["product"] == "chatbot":
        if "kb_status" not in s["info"]:
            s["info"]["kb_status"] = "waiting"
            zalo_send_text(user_id, "B·∫°n g·ª≠i **t√†i li·ªáu (PDF/DOC)** ho·∫∑c **URL** ƒë·ªÉ m√¨nh train chatbot nha." + contact_hint)
            return {"status": "ask_kb"}
        summary = (
            "‚úÖ T√≥m t·∫Øt ƒë∆°n h√†ng Chatbot AI:\n"
            f"- Li√™n h·ªá: {s['info'].get('name', s['profile'].get('display_name',''))} | {s['info'].get('phone','?')} | {s['info'].get('email','?')}\n"
            "- T√†i li·ªáu: ƒëang ch·ªù b·∫°n g·ª≠i.\n"
            "B·∫°n c·∫ßn t√≠ch h·ª£p Website/Fanpage v.v‚Ä¶ kh√¥ng ·∫°?"
        )
        zalo_send_text(user_id, summary)
        push_history(user_id, "assistant", summary)
        return {"status": "summary"}

    # ===== Tr·∫£ l·ªùi h·ªôi tho·∫°i t·ª± nhi√™n (ƒë·ªùi s·ªëng/kh√°c) =====
    history_str = short_context(user_id, 6)
    rag_ctx = ""
    if faiss_index.ntotal > 0 and user_text:
        ctx_hits = retrieve(user_text, 4)
        rag_ctx = "\n\n".join(h["text"] for h in ctx_hits)

    reply = call_flash(
        system_prompt(s["profile"], s["salute"]),
        user_text,
        s["profile"],
        s["image_notes"],
        history_str,
        rag_ctx
    )
    # ƒë√≠nh k√®m nh·∫Øc contact n·∫øu c√≤n thi·∫øu (kh√¥ng l·∫∑p l·∫°i n·∫øu ƒë√£ c√≥ ƒë·ªß)
    reply_out = reply + (contact_hint if contact_hint and "H·ªç t√™n" not in reply else "")
    zalo_send_text(user_id, reply_out)

    push_history(user_id, "user", user_text or "[non-text]")
    push_history(user_id, "assistant", reply_out)
    s["image_notes"].clear()
    return {"status": "ok"}
